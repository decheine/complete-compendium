{"version":3,"file":"component---src-templates-bookmonster-tsx-7402220a884410188ee7.js","mappings":"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","sources":["webpack://complete-compendium/./src/templates/bookmonster.tsx"],"sourcesContent":["import React from \"react\"\nimport Layout from '../components/Layout';\nimport {  PageProps, Link, graphql, HeadFC  } from \"gatsby\";\n\nimport { CreatePagesArgs } from 'gatsby';\nimport { Interweave } from \"interweave\";\n\n// Formatting\nimport \"@styles/SettingColors.css\"\n// import \"../styles/MonsterPage.css\"\nimport COLORS from '@styles/SettingColors'\nimport RandomMonsterButton from \"@components/RandomMonsterButton\";\n\nimport * as monsterPageStyles from \"@styles/modules/monsterpage.module.css\"\n\nimport { polyfill } from 'interweave-ssr';\n\npolyfill();\n// export default function Container({ children }) {\n//   return <div className={containerStyles.container}>{children}</div>\n// }\n// const isBrowser = typeof window !== \"undefined\"\n\nconst cat_acronyms = require('@data/CatAcronyms.json')\n// const sorted_tsr = require('@data/sortedtsr.json')\nconst all_tsr = require('../../data/all_tsr.json')\nconst publishId_to_acronym = require('@data/publishId_to_acronym.json')\n///////////\n// Styles\n\nconst settingImageStyle = {\n  float: \"right\",\n  width: \"150px\",\n}\n\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\ntype MonsterDataType = {\n    TSR: string[],\n    fullBody: string,\n    images: string[],\n    setting: string,\n    statblock: Object,\n    title: string\n}\n\ntype MonsterPageContext = {\n    monster_key: string\n    monster_data: MonsterDataType\n    sources: string[]\n    statblock_names: string[]\n    title: string\n    prev_key: string\n    next_key: string\n    catelog_book: string\n    catelog_setting: string\n    monster_path: string\n}\n\n\ntype MonsterDataWrapper = {\n    monster_page: MonsterPageContext\n    // workaround syntax warning fix,\n    // the following aren't used in reality, only\n    // monster_page\n    monster_key: string\n    monster_data: MonsterDataType\n    sources: string[]\n    statblock_names: string[]\n    title: string\n    prev_key: string\n    next_key: string\n    catelog_book: string\n    catelog_setting: string\n    \n}\n\ninterface Props {\n  pageContext: MonsterPageContext\n  }\n\nconst BookMonsterTemplate: React.FC<Props> = ({pageContext }) => {\n//   const [screenSize, setScreenSize] = useState(getCurrentDimension());\n\n//   function getCurrentDimension(){\n//     if(isBrowser){\n\n//       return {\n//         width: global.window.innerWidth,\n//       \theight: global.window.innerHeight\n//       }\n//     } else {\n//       return {\n//         width: 0,\n//         height: 0,\n//       }\n//     }\n// }\n\n//   useEffect(() => {\n//     const updateDimension = () => {\n//       setScreenSize(getCurrentDimension())\n//     }\n//     if(isBrowser)\n//       global.window.addEventListener('resize', updateDimension);\n    \n//     return(() => {\n//         global.window.removeEventListener('resize', updateDimension);\n//     })\n//   }, [screenSize])\n\n  const monster_page_data: MonsterPageContext = pageContext\n  // const monster_object = pageContext.monster_object\n//   console.log(\"monster page\")\n//   console.log(monster_page_data)\n  // console.log(\"monster template\")\n  // console.log(monster_object)\n  const monster_key = monster_page_data.monster_key\n  const title = monster_page_data.title\n  const sources = monster_page_data.sources\n  const previous_monster_key = monster_page_data.prev_key\n  const next_monster_key = monster_page_data.next_key\n  const catelog_book = monster_page_data.catelog_book\n  const catelog_setting = monster_page_data.catelog_setting\n//   console.log(previous_monster_key, next_monster_key)\n  // Checking Main Image\n  //  If the regex pattern matches, know we NEED an image. So set the url to where it should be with monster_key\n  //  and also have an onerror=\"javascript:this.src='images/default.jpg'\" to set the image to default if it doesn't exist\n  //  If doesn't need image, set the bool flag and no image will be rendered\n  let monster_image = null;\n  let needs_image = true;\n  let image_url = \"\";\n  // if(monster_page_data.monster_data.images[1]) regex contains monster_key\n  let main_img_pattern = \"img/\" + monster_page_data.monster_key\n  if(monster_page_data.monster_data.images[1] && monster_page_data.monster_data.images[1].match(new RegExp(main_img_pattern, \"g\"))){\n      // console.log(\"Should have image\")\n      needs_image = true;\n  } else {\n      // console.log(\"Does not have image\")\n      needs_image = false;\n  }\n\n  if(needs_image){\n      // Set image url\n      image_url = \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\"\n      let image_placeholder = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n\n      monster_image = <img className={monsterPageStyles.monsterImage}   src={image_url}\n      alt={monster_page_data.monster_data.title} \n      title={monster_page_data.monster_data.title} \n      onError={({currentTarget}) => {\n          currentTarget.onerror = null;\n          currentTarget.alt = \"This monster is missing it's image. It will be found eventually.\";\n          currentTarget.src = image_placeholder;\n          currentTarget.title = \"Missing image of \" + monster_page_data.monster_data.title;\n      }}/>\n\n  } \n    \n  // Change document title to monster title\n  // if(typeof document !== 'undefined'){\n  //     document.title = monster_page_data.monster_data.title + \" - Complete Compendium\";\n  // }\n\n  // Handle setting and accent color.\n  const setting_name = monster_page_data.monster_data.setting;\n  const setting_acr = cat_acronyms[setting_name]\n  var hrClass = \"hr2\"\n  var titleStyle = {}\n  if(setting_acr){\n      hrClass = \"hr2-\" + setting_acr\n      const colorVar = \"--color-\" + setting_acr\n      titleStyle = {color: COLORS.get(setting_acr)}\n  }\n\n  \n  let monsterNavWidgets: JSX.Element = <div>\n  <div className={monsterPageStyles.monsterNavLinks}>\n    <div className={monsterPageStyles.pageRandomMonsterButton}>\n      <RandomMonsterButton home={false} />\n    </div>\n    <div className={monsterPageStyles.horizontalMonsterLinks}>\n      <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + previous_monster_key}>\n        <div className={monsterPageStyles.monsterNav}>\n            Previous\n        </div>\n      </Link>\n      {/* Random Monster */}\n      {/* <div className={monsterPageStyles.monsterNav}>\n          <RandomMonsterButton />\n        </div> */}\n      <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + next_monster_key}>\n        <div className={monsterPageStyles.monsterNav}>\n          Next\n        </div>\n      </Link>\n    </div>\n  </div>\n</div>\n\n  // Title style\n\n  \n  if(monster_key == \"horax\"){\n    console.log(\"booktemplate monster, HORAX\")\n    console.log(\"prev\", previous_monster_key)\n    console.log(\"next\", next_monster_key)\n  }\n  const fullBody = monster_page_data.monster_data.fullBody;\n  const interweaveMonsterBody: JSX.Element = <div className=\"set-html\" dangerouslySetInnerHTML={{__html: fullBody}} />\n\n  // const { book_data } = data\n  return (\n    <Layout url={`/catalog/${catelog_setting}/${catelog_book}/${monster_key}`}>\n      <div>\n        {monsterNavWidgets}\n\n      {/* TITLE */}\n      <div className={monsterPageStyles.topHeader}>\n          <h1 style={titleStyle}>{monster_page_data.monster_data.title}</h1>\n          <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting]}>\n              <img className={monsterPageStyles.settingImage} src={`/img_settings/${cat_acronyms[monster_page_data.monster_data.setting]}.gif`}  alt={monster_page_data.monster_data.setting + \"Campaign Setting Logo\"} title={monster_page_data.monster_data.setting}/>\n          </Link>\n      </div>\n      \n      <hr className ={hrClass}/>\n      <hr className ={monsterPageStyles.hr1}/>\n\n      <div className={monsterPageStyles.monsterImgFrame}>\n      {monster_image}\n      </div>\n\n      <Interweave className=\"interweave\" content={fullBody} />\n      {/* {interweaveMonsterBody} */}\n\n      {/* TSR Array */}\n      <div className={monsterPageStyles.sourceList}>\n        <div className={monsterPageStyles.tsrLabel}>\n            Sourcebooks:\n        </div>\n        <div className={monsterPageStyles.tsr}>\n            {\n                (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                        return (\n                            <div key={tsr}>\n                                <Link to={\"/catalog/\" + publishId_to_acronym[tsr] + \"/\" + tsr}>{all_tsr[tsr]?.title} ({tsr})</Link>\n                                <br/>\n                            </div>\n                        )\n                    }\n                )\n                : \"No TSR\"\n            }\n        </div>\n    </div>\n\n    {/* LAST MODIFIED */}\n    {/* <div className=\"last-modified\">\n        Last Modified: {monster_page_data.updatedAt}\n    </div> */}\n\n\n\n\n      </div>\n    </Layout>\n  )\n}\n\nexport const Head: React.FC<Props> = ({ pageContext }) => (\n  <>\n    <title>{pageContext.title + \" - AD&D Complete Compendium\"}</title>\n    <meta property=\"og:site_name\" content=\"AD&D 2nd Edition Complete Monstrous Compendium\"/>\n    <meta property=\"og:title\" content={pageContext.monster_data.title  + \" | AD&D Complete Compendium\"}/>\n    <meta property=\"og:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path}/>\n    <meta property=\"og:type\" content=\"website\"/>\n    {\n      pageContext.monster_data.images[1] && pageContext.monster_data.images[1].match(new RegExp(pageContext.monster_key, \"g\")) ?\n      <>\n      <meta property=\"og:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n      <meta name=\"twitter:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n    </>\n      :\n      <></>\n    }\n    <meta property=\"og:image:width\" content=\"300\"/>\n    <meta property=\"og:image:height\" content=\"360\"/>\n    \n          \n    {/* <meta name=\"description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } /> */}\n    {/* Image: \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\" */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n    <meta name=\"twitter:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path} />\n    <meta name=\"twitter:title\" content=\"Advanced Dungeons & Dragons 2nd Edition Complete Compendium\" />\n        \n  </>\n)\n\n\nexport default BookMonsterTemplate"],"names":["polyfill","cat_acronyms","require","all_tsr","publishId_to_acronym","Head","_ref3","pageContext","React","title","property","content","monster_data","monster_path","images","match","RegExp","monster_key","name","_ref","monster_page_data","previous_monster_key","sources","prev_key","next_monster_key","next_key","catelog_book","catelog_setting","monster_image","needs_image","image_url","main_img_pattern","image_placeholder","className","monsterPageStyles","src","alt","onError","_ref2","currentTarget","onerror","setting_name","setting","setting_acr","hrClass","titleStyle","color","COLORS","get","monsterNavWidgets","RandomMonsterButton","home","Link","to","console","log","fullBody","Layout","url","style","Interweave","hasOwnProperty","map","tsr","_all_tsr$tsr","key"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-monster-tsx-0c4a7078da1971cbc299.js","mappings":"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","sources":["webpack://adnd-compendium-static-frontend/./src/components/RandomMonsterButton.tsx","webpack://adnd-compendium-static-frontend/./src/styles/SettingColors.ts","webpack://adnd-compendium-static-frontend/./src/components/regex_description.ts","webpack://adnd-compendium-static-frontend/./src/templates/monster.tsx","webpack://adnd-compendium-static-frontend/./src/styles/modules/monsterpage.module.css"],"sourcesContent":["// Random monster button.\nimport React from \"react\"\n\nimport { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n\nimport './RandomMonsterButton.css';\n\nimport AA_KEYS_TITLES from '../data/AA_KEYS_TITLES.json'\nimport { Link } from \"gatsby\";\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * max);\n  }\n\nconst RandomMonsterButton = () => {\n    const [monster_key, setMonsterKey] = useState('');\n    // const [monster_title, setMonsterTitle] = useState('');\n\n    const getRandomMonster = () => {\n        // if DataService.monsterTitles is undefined\n        const monsterKeys = Object.keys(AA_KEYS_TITLES);\n        //console.log(\"Random. localmonsterkeys\",monsterKeys  )\n        if(monsterKeys !== undefined){\n\n            const random_key = monsterKeys[getRandomInt(monsterKeys.length)];\n            setMonsterKey(random_key);\n        }\n    }\n\n    useEffect(() => {\n        getRandomMonster();\n    }, []);\n\n    return (\n        <div className=\"RandomMonsterButton\">\n            <Link to={\"/appendix/\" + monster_key}>\n                <div className=\"random-button\" onClick={getRandomMonster}>Random Monster</div>\n            </Link>\n        </div>\n    );\n}\n\nexport default RandomMonsterButton;","\n// const COLORS = {\n//     add2_01: \"#1250A2\",\n//     aq: \"#cc9900\",\n//     al: \"#78b345\",\n//     br: \"#4682b4\",\n//     ds: \"#ca5804\",\n//     dr: \"#cc9900\",\n//     dl: \"#ffa500\",\n//     du: \"#4C4B51\",\n//     ff: \"#1250A2\",\n//     fr: \"#ffd700\",\n//     gh: \"#ff8c46\",\n//     kt: \"#ffa000\",\n//     lm: \"#46c8c8\",\n//     rd: \"#7f0000\",\n//     mz: \"#b8860b\",\n//     ms: \"#ff3333\",\n//     ps: \"#b8860b\",\n//     rv: \"#7f0000\",\n//     rs: \"#993366\",\n//     sj: \"#4c8bc2\",\n//     th: \"#ff6633\"\n// }\n// For Titles\nconst COLORS = new Map<string, string>([\n    [\"add2_01\",  \"#1250A2\"], // /\n    [\"aq\",       \"#957000\"], // /\n    [\"al\",       \"#568132\"], // /\n    [\"br\",       \"#427aa9\"], // /\n    [\"ds\",       \"#c25404\"], // /\n    [\"dr\",       \"#957000\"], // /\n    [\"dl\",       \"#9b6400\"], // /\n    [\"du\",       \"#4C4B51\"], // /\n    [\"ff\",       \"#b15f3d\"], // /\n    [\"fr\",       \"#191970\"], // /\n    [\"gh\",       \"#b06030\"], // /\n    [\"kt\",       \"#8d7206\"], // /\n    [\"lm\",       \"#2d8181\"], // /\n    [\"rd\",       \"#7f0000\"], // /\n    [\"mz\",       \"#976e09\"], // /\n    [\"ms\",       \"#e02d2d\"], // /\n    [\"ps\",       \"#976e09\"], // /\n    [\"rv\",       \"#7f0000\"], // /\n    [\"rs\",       \"#993366\"], // /\n    [\"sj\",       \"#4279a9\"], // /\n    [\"th\",       \"#c64f28\"], // \n])\n\n\n\n\nexport default COLORS","\n\nfunction getMonsterDescription(monster_key: string, fullBodyString: string): string {\n    let description = \"\"\n    const regexp = /<p class=\\\"f\\\">([^<].+?)<\\/p>/;\n    // const regexp = /(<p class=\\\\\"f\\\\\">)/gm;\n    // const regexp = /(<p class)/gm;\n    // const regexp = /<p class=/;\n    // const matches = fullBodyString.matchAll(regexp);\n    const match = fullBodyString.match(regexp)\n    // for (const match of fullBodyString.matchAll(regexp)) {\n    //   console.log(`Match! ${match[1]}`);\n    // }\n    if(match !== null){\n      if(match[1]){\n        description = match[1]  \n      }\n      // console.log(\"Match found!\")\n    } \n    // console.log(\"Description for: \", monster_key)\n    \n    // Filter html blocks\n    description = description.replace(/<.*?>/g, \"\")\n    \n    // console.log(description)\n    return description\n  }\n\nexport default getMonsterDescription;","import React from \"react\"\n// import { useEffect, useState } from 'react'\n\nimport Layout from '../components/Layout';\nimport {  PageProps, Link, HeadFC, HeadProps, graphql  } from \"gatsby\";\n\nimport { CreatePagesArgs } from 'gatsby';\nimport { Interweave } from \"interweave\";\n\n// Formatting\nimport \"@styles/SettingColors.css\"\n// import \"../styles/MonsterPage.css\"\nimport COLORS from '@styles/SettingColors'\nimport RandomMonsterButton from \"@components/RandomMonsterButton\";\n\nimport * as monsterPageStyles from \"@styles/modules/monsterpage.module.css\"\n\nimport getMonsterDescription from \"@components/regex_description\"\n\n\nconst cat_acronyms = require('@data/CatAcronyms.json')\nconst sorted_tsr = require('@data/sortedtsr.json')\n///////////\n// Styles\n\nconst settingImageStyle = {\n  float: \"right\",\n  width: \"150px\",\n}\n\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\ntype MonsterDataType = {\n    TSR: string[],\n    fullBody: string,\n    images: string[],\n    setting: string,\n    statblock: Object,\n    title: string\n}\n\ntype MonsterPageContext = {\n    monster_key: string\n    monster_data: MonsterDataType\n    sources: string[]\n    statblock_names: string[]\n    title: string\n    prev_key: string\n    next_key: string\n    monster_path: string\n    // intereweave_body: JSX.Element\n}\n\ninterface Props {\n  pageContext: MonsterPageContext\n  }\n\n\nconst MonsterTemplate: React.FC<Props> = ( {pageContext} ) => {\n  const monster_page_data: MonsterPageContext = pageContext\n  // console.log(monster_page_data)\n  // const monster_object = pageContext.monster_object\n//   console.log(\"monster page\")\n//   console.log(monster_page_data)\n  // console.log(\"monster template\")\n  // console.log(monster_object)\n  const monster_key = monster_page_data.monster_key\n  const title = monster_page_data.title\n  const sources = monster_page_data.sources\n  const previous_monster_key = monster_page_data.prev_key\n  const next_monster_key = monster_page_data.next_key\n\n  const fullBody = monster_page_data.monster_data.fullBody;\n  // Getting the fullbody data and putting it into React state\n  // to prevent hydration issue on refresh\n\n  // const [interweave_body, setInterweave] = useState<JSX.Element>();\n\n  // Data does't start loading\n  // until *after* Parent is mounted\n  // useEffect(() => {\n  //   setInterweave(<Interweave className=\"interweave\" content={fullBody} />)\n  // }, []);\n\n\n  //   console.log(previous_monster_key, next_monster_key)\n  // Checking Main Image\n  //  If the regex pattern matches, know we NEED an image. So set the url to where it should be with monster_key\n  //  and also have an onerror=\"javascript:this.src='images/default.jpg'\" to set the image to default if it doesn't exist\n  //  If doesn't need image, set the bool flag and no image will be rendered\n  let monster_image = null;\n  let needs_image = true;\n  let image_url = \"\";\n  // if(monster_page_data.monster_data.images[1]) regex contains monster_key\n  if(monster_page_data.monster_data.images[1] && monster_page_data.monster_data.images[1].match(new RegExp(monster_page_data.monster_key, \"g\"))){\n      // console.log(\"Should have image\")\n      needs_image = true;\n  } else {\n      // console.log(\"Does not have image\")\n      needs_image = false;\n  }\n\n  if(needs_image){\n      // Set image url\n      image_url = \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\"\n      let image_placeholder = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n\n      monster_image = <img className={monsterPageStyles.monsterImage}   src={image_url}\n      alt={monster_page_data.monster_data.title} \n      title={monster_page_data.monster_data.title} \n      onError={({currentTarget}) => {\n          currentTarget.onerror = null;\n          currentTarget.alt = \"This monster is missing it's image. It will be found eventually.\";\n          currentTarget.src = image_placeholder;\n          currentTarget.title = \"Missing image of \" + monster_page_data.monster_data.title;\n      }}/>\n\n  } \n    \n  // Change document title to monster title\n  if(typeof document !== 'undefined'){\n      // document.title = monster_page_data.monster_data.title + \" - Complete Compendium\";\n  }\n\n  // Handle setting and accent color.\n  const setting_name = monster_page_data.monster_data.setting;\n  const setting_acr = cat_acronyms[setting_name]\n  var hrClass = \"hr2\"\n  var titleStyle = {}\n  if(setting_acr){\n      hrClass = \"hr2-\" + setting_acr\n      const colorVar = \"--color-\" + setting_acr\n      titleStyle = {color: COLORS.get(setting_acr)}\n  }\n\n  // Title style\n\n  const interweaveMonsterBody: JSX.Element = <div className=\"set-html\" dangerouslySetInnerHTML={{__html: fullBody}} />\n\n\n  // if(monster_key == \"horax\"){\n  //   console.log(\"appendix template monster, HORAX\")\n  //   console.log(pageContext)\n  //   console.log(\"prev\", previous_monster_key)\n  //   console.log(\"next\", next_monster_key)\n  // }\n  const test_jsx: JSX.Element = <div>Test JSX Element</div>\n\n  // const { book_data } = data\n  return (\n    <>\n    \n    {/* <Head title={monster_page_data.monster_data.title} description={`Description for ${monster_page_data.monster_data.title}`} /> */}\n    <Layout url={`/appendix/${monster_key}`}>\n      <div>\n        <div>\n          <div className={monsterPageStyles.monsterNavLinks}>\n            <div className={monsterPageStyles.monsterNav}>\n                <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + previous_monster_key}>Previous</Link>\n            </div>\n            {/* Random Monster */}\n            <div className={monsterPageStyles.monsterNav}>\n                <RandomMonsterButton />\n            </div>\n            <div className={monsterPageStyles.monsterNav}>\n                <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + next_monster_key}>Next</Link>\n            </div>\n          </div>\n        </div>\n\n      {/* TITLE */}\n      <div className={monsterPageStyles.topHeader}>\n          <h1 style={titleStyle}>{monster_page_data.monster_data.title}</h1>\n          <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting]}>\n              <img className={monsterPageStyles.settingImage} src={`/img_settings/${cat_acronyms[monster_page_data.monster_data.setting]}.gif`}  alt={monster_page_data.monster_data.setting + \"Campaign Setting Logo\"} title={monster_page_data.monster_data.setting}/>\n          </Link>\n      </div>\n      \n      <hr className ={monsterPageStyles.hr1}/>\n      <hr className ={hrClass}/>\n\n      <div className={monsterPageStyles.monsterImgFrame}>\n      {monster_image}\n      </div>\n\n      {/* <Interweave className=\"interweave\" content={fullBody} /> */}\n      {interweaveMonsterBody}\n\n      {/* <Interweave content=\"This string contains <b>HTML</b> and will safely be rendered!\" /> */}\n      {/* {test_jsx} */}\n      {/* TSR Array */}\n      <div className={monsterPageStyles.sourceList}>\n        <div className={monsterPageStyles.tsrLabel}>\n            Sourcebooks:\n        </div>\n        <div className={monsterPageStyles.tsr}>\n            {\n                (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                        return (\n                            <div key={tsr}>\n                                <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting] + \"/\" + tsr}>{sorted_tsr[tsr]} ({tsr})</Link>\n                                <br/>\n                            </div>\n                        )\n                    }\n                )\n                : \"No TSR\"\n            }\n        </div>\n    </div>\n\n    {/* LAST MODIFIED */}\n    {/* <div className=\"last-modified\">\n        Last Modified: {monster_page_data.updatedAt}\n    </div> */}\n\n\n\n\n      </div>\n    </Layout>\n    </>\n  )\n}\n\n// interface HeadProps {\n//   location: any,\n//   params: any,\n//   data: any,\n//   pageContext: MonsterPageContext\n// }\n\n\n\n// export function Head ({ location, params, data, pageContext }: HeadProps) => (\n//   <>\n//     <title>{pageContext.title}</title>\n//     <meta name=\"description\" content={data.page.description} />\n//     <meta\n//       name=\"twitter:url\"\n//       content={`https://www.foobar.tld/${location.pathname}`}\n//     />\n//   </>\n// )\n\n// export function Head(props: HeadProps<DataProps>){\n\n//   // Extract description.\n\n//   // Demo description for now.\n\n//   const monster_desc = `Description for ${props.data.sitePage.pageContext.title}`\n//   console.log(\"Head\", props.data.sitePage.pageContext)\n\n//   return (\n//     <>\n//       <title>{props.data.sitePage.pageContext.title}</title>\n//       <meta name=\"description\" content={monster_desc} />\n//     </>\n//   )\n// }\n\n\n\n// export const Head = () => (\n//   <>\n//     <title>Hello World</title>\n//     <meta name=\"description\" content=\"Hello World\" />\n//   </>\n// )\n\n// Function that takes in a fullBody string and \n// returns the monster description (first paragraph) \n//  \n\n\n\nexport const Head: React.FC<Props> = ({ pageContext }) => (\n  <>\n    <title>{pageContext.title} - AD&D Complete Compendium</title>\n    <meta property=\"og:site_name\" content=\"AD&D 2nd Edition Complete Monstrous Compendium\"/>\n    <meta property=\"og:title\" content={pageContext.monster_data.title  + \" | AD&D Complete Compendium\"}/>\n    <meta property=\"og:description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) }/>\n    <meta property=\"og:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path}/>\n    <meta property=\"og:type\" content=\"website\"/>\n    {\n      pageContext.monster_data.images[1] && pageContext.monster_data.images[1].match(new RegExp(pageContext.monster_key, \"g\")) ?\n      <>\n      <meta property=\"og:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n      <meta name=\"twitter:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n    </>\n      :\n      <></>\n    }\n    <meta property=\"og:image:width\" content=\"300\"/>\n    <meta property=\"og:image:height\" content=\"360\"/>\n    \n          \n    {/* <meta name=\"description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } /> */}\n    {/* Image: \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\" */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n    <meta name=\"twitter:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path} />\n    <meta name=\"twitter:title\" content=\"Advanced Dungeons & Dragons 2nd Edition Complete Compendium\" />\n    <meta name=\"twitter:description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } />\n        \n  </>\n)\n\nexport default MonsterTemplate\n\nexport const query = graphql`\n  {\n    sitePage {\n      pageContext\n    }\n  }\n`","// extracted by mini-css-extract-plugin\nexport var RandomMonsterButton = \"monsterpage-module--RandomMonsterButton--65e5f\";\nexport var StatblockImage = \"monsterpage-module--Statblock-Image--5cd11\";\nexport var bk = \"monsterpage-module--bk--0c7e9\";\nexport var bodyBlocks = \"monsterpage-module--body-blocks--a22b5\";\nexport var cn = \"monsterpage-module--cn--2c6ef\";\nexport var f = \"monsterpage-module--f--f6dca\";\nexport var fi = \"monsterpage-module--fi--5f664\";\nexport var hr1 = \"monsterpage-module--hr1--f5b5c\";\nexport var interweave = \"monsterpage-module--interweave--f54cc\";\nexport var ip = \"monsterpage-module--ip--d7cfc\";\nexport var lastModified = \"monsterpage-module--last-modified--850e5\";\nexport var loading = \"monsterpage-module--loading--0674d\";\nexport var monsterBody = \"monsterpage-module--monster-body--65cac\";\nexport var monsterImage = \"monsterpage-module--monster-image--bb97d\";\nexport var monsterImgFrame = \"monsterpage-module--monster-img-frame--67133\";\nexport var monsterNav = \"monsterpage-module--monster-nav--3c352\";\nexport var monsterNavLink = \"monsterpage-module--monster-nav-link--495ca\";\nexport var monsterNavLinks = \"monsterpage-module--monster-nav-links--c9a5a\";\nexport var ni = \"monsterpage-module--ni--d20dd\";\nexport var psionicTableData = \"monsterpage-module--psionic-table-data--bec3c\";\nexport var psionicsSummary = \"monsterpage-module--psionics-summary--e13ca\";\nexport var psionicsTable = \"monsterpage-module--psionics-table--3af5a\";\nexport var settingImage = \"monsterpage-module--setting-image--e8b92\";\nexport var sourceList = \"monsterpage-module--source-list--66a63\";\nexport var statblock = \"monsterpage-module--statblock--52b79\";\nexport var topHeader = \"monsterpage-module--top-header--5efbc\";\nexport var tsr = \"monsterpage-module--tsr--2eb82\";\nexport var tsrFooter = \"monsterpage-module--tsr-footer--866d8\";\nexport var tsrLabel = \"monsterpage-module--tsr-label--b394a\";"],"names":["RandomMonsterButton","monster_key","setMonsterKey","useState","getRandomMonster","monsterKeys","Object","keys","AA_KEYS_TITLES","undefined","random_key","max","length","Math","floor","random","useEffect","React","className","Link","to","onClick","COLORS","Map","fullBodyString","description","match","replace","cat_acronyms","require","sorted_tsr","Head","_ref3","pageContext","title","property","content","monster_data","getMonsterDescription","fullBody","monster_path","images","RegExp","name","_ref","monster_page_data","previous_monster_key","sources","prev_key","next_monster_key","next_key","monster_image","needs_image","image_url","image_placeholder","monsterPageStyles","src","alt","onError","_ref2","currentTarget","onerror","setting_name","setting","setting_acr","hrClass","titleStyle","color","get","interweaveMonsterBody","dangerouslySetInnerHTML","__html","Layout","url","style","hasOwnProperty","map","tsr","key","hr1","monsterImage","monsterImgFrame","monsterNav","monsterNavLink","monsterNavLinks","settingImage","sourceList","topHeader","tsrLabel"],"sourceRoot":""}
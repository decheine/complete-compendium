{"version":3,"file":"component---src-pages-index-tsx-2d3fb95deb6b63fa52ef.js","mappings":"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","sources":["webpack://adnd-compendium-static-frontend/./src/components/RandomMonsterButton.tsx","webpack://adnd-compendium-static-frontend/./src/components/HomeCard.tsx","webpack://adnd-compendium-static-frontend/./src/components/Cards.tsx","webpack://adnd-compendium-static-frontend/./src/components/Statistics.tsx","webpack://adnd-compendium-static-frontend/./src/pages/index.tsx"],"sourcesContent":["// Random monster button.\nimport React from \"react\"\n\nimport { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n\nimport './RandomMonsterButton.css';\n\nimport AA_KEYS_TITLES from '../data/AA_KEYS_TITLES.json'\nimport { Link } from \"gatsby\";\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * max);\n  }\n\nconst RandomMonsterButton = () => {\n    const [monster_key, setMonsterKey] = useState('');\n    // const [monster_title, setMonsterTitle] = useState('');\n\n    const getRandomMonster = () => {\n        // if DataService.monsterTitles is undefined\n        const monsterKeys = Object.keys(AA_KEYS_TITLES);\n        //console.log(\"Random. localmonsterkeys\",monsterKeys  )\n        if(monsterKeys !== undefined){\n\n            const random_key = monsterKeys[getRandomInt(monsterKeys.length)];\n            setMonsterKey(random_key);\n        }\n    }\n\n    useEffect(() => {\n        getRandomMonster();\n    }, []);\n\n    return (\n        <div className=\"RandomMonsterButton\">\n            <Link to={\"/appendix/\" + monster_key}>\n                <div className=\"random-button\" onClick={getRandomMonster}>Random Monster</div>\n            </Link>\n        </div>\n    );\n}\n\nexport default RandomMonsterButton;","// Component HomeCard\n\nimport React from 'react';\n\nimport './HomeCard.css';\n\ntype HomeCardProps = {\n    title: string,\n    body: string,\n    linkText: string,\n    link: string\n}\n\nexport function HomeCard(props: HomeCardProps) {\n    return (\n        <div className=\"HomeCard\">\n                <div className=\"card-frame\">\n                    <div className=\"flex-top\">\n                        <div className=\"card-title\">{props.title}</div>\n                        <div className=\"card-body\">{props.body}</div>\n                    </div>\n\n                        <div className=\"card-link\">\n                            <a href={props.link}>\n                            {props.linkText}\n                            </a>\n                        </div>\n                </div>\n        </div>\n    );\n}","// Cards component with 3 HomeCards\n//\n\nimport React from 'react';\n\nimport { HomeCard } from './HomeCard';\n\nimport './Cards.css';\n\nexport function Cards() {\n    return (\n        <div className=\"Cards\">\n            <div className=\"card-row\">\n                <HomeCard   title=\"Every Monster\" \n                            body=\"Compiled from every sourcebook, every monster with a page in any AD&D 2nd Edition source material is indexed.\" \n                            linkText=\"See the Complete Appendix\" \n                            link=\"/appendix\" />\n\n                <HomeCard   title=\"Every Setting\" \n                            body=\"This compendium contains every campaign setting from Forgotten Realms to the obscure Alternity. The Mists of Ravenloft to Castle Greyhawk to the great city of Cigil at the center of the Cosmos.\" \n                            linkText=\"See Every Campaign Setting\" \n                            link=\"/catalog#settings\" />\n\n                <HomeCard   title=\"Every Book\" \n                            body=\"Every publication id number mentioned across all the monster files has been collected and cataloged. \" \n                            linkText=\"See Every Monster Sourcebook\" \n                            link=\"/catalog#books\" />\n            </div>\n        </div>\n    );\n}","// Component for the Statistics section of the Home page\n//\n\n// Two components: one for the statistics section,\n//  and one for a statistic\n\nimport React from 'react';\nimport {useMemo, useState, useEffect} from 'react';\n\n// import { Statistic } from './Statistic';\n\nimport './Statistics.css';\n\nconst stats_json = require('../data/statistics.json')\n\ntype StatisticProps = {\n    name: string;\n    value: string;\n}\n\nconst Statistic = (props: StatisticProps) => {\n    return (\n        <div className=\"statistic\">\n            <div className=\"stat-number\">{props.value}</div>\n            <div className=\"stat-name\">{props.name}</div>\n        </div>\n    );\n}\n\nexport interface IStatistics{\n    settings_number: string;\n    books_number: string;\n    pages_number: string;\n    unique_number: string;\n}\n\nexport const StatisticBlock = () => {\n    // Fetch data from the API\n    \n    // if data is not null and has members, render the statistics\n    var settings_number\n    var books_number\n    var pages_number\n    var unique_number;\n    // if (data === null){\n    settings_number = stats_json[\"settings_count\"];\n    books_number = stats_json[\"books_count\"];\n    pages_number = stats_json[\"pages_count\"];\n    unique_number = stats_json[\"unique_count\"];\n    // }\n    // if (data && data.settings_number\n    //     && data.books_number\n    //     && data.pages_number\n    //     && data.unique_number) {\n    //         var settings_number = data === null ? \"...\" : Number(data[0][\"stat_value\"]).toLocaleString('en', {useGrouping: true});\n    //         var books_number = data == null ? \"...\" : Number(data[1][\"stat_value\"]).toLocaleString('en', {useGrouping: true});\n    //         var pages_number = data == null ? \"...\" : Number(data[2][\"stat_value\"]).toLocaleString('en', {useGrouping: true});\n    //         var unique_number = data == null ? \"...\" : Number(data[3][\"stat_value\"]).toLocaleString('en', {useGrouping: true});\n    //     }\n\n\n\n    return (\n        <div className=\"statistics\">\n            <div className=\"statistics_container\">\n            <div className=\"statistics_header\">\n                <h1>Statistics</h1>\n                </div>\n                <div className=\"statistics_grid\">\n                    <Statistic\n                        name=\"Settings\"\n                        value={settings_number}\n                    />\n                    <Statistic\n                        name=\"Books\"\n                        // value={books_number.toLocaleString('en', {useGrouping: true})}\n                        value={books_number}\n                    />\n                    <Statistic\n                        name=\"Monster Pages\"\n                        value={pages_number}\n                    />\n                    <Statistic\n                        name=\"Unique Monsters\"\n                        value={unique_number}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n    }","import * as React from \"react\"\nimport { graphql, HeadProps, HeadFC, PageProps } from \"gatsby\"\n\nimport \"./home.css\";\nimport \"./styles.css\"\nimport \"../styles/global.css\"\n\nimport Navbar from \"../components/Navbar\"\nimport Footer from \"../components/Footer\";\nimport RandomMonsterButton from \"../components/RandomMonsterButton\";\nimport { Cards } from \"../components/Cards\";\nimport { StatisticBlock } from \"../components/Statistics\";\n// import Layout from \"../components/Layout\";\n\nconst pageStyles = {\n  color: \"#232129\",\n  padding: 96,\n  fontFamily: \"-apple-system, Roboto, sans-serif, serif\",\n}\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\nconst headingAccentStyles = {\n  color: \"#663399\",\n}\nconst paragraphStyles = {\n  marginBottom: 48,\n}\nconst codeStyles = {\n  color: \"#8A6534\",\n  padding: 4,\n  backgroundColor: \"#FFF4DB\",\n  fontSize: \"1.25rem\",\n  borderRadius: 4,\n}\nconst listStyles = {\n  marginBottom: 96,\n  paddingLeft: 0,\n}\nconst doclistStyles = {\n  paddingLeft: 0,\n}\nconst listItemStyles = {\n  fontWeight: 300,\n  fontSize: 24,\n  maxWidth: 560,\n  marginBottom: 30,\n}\n\nconst linkStyle = {\n  color: \"#8954A8\",\n  fontWeight: \"bold\",\n  fontSize: 16,\n  verticalAlign: \"5%\",\n}\n\nconst docLinkStyle = {\n  ...linkStyle,\n  listStyleType: \"none\",\n  display: `inline-block`,\n  marginBottom: 24,\n  marginRight: 12,\n}\n\nconst descriptionStyle = {\n  color: \"#232129\",\n  fontSize: 14,\n  marginTop: 10,\n  marginBottom: 0,\n  lineHeight: 1.25,\n}\n\nconst docLinks = [\n  {\n    text: \"TypeScript Documentation\",\n    url: \"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\",\n    color: \"#8954A8\",\n  },\n  {\n    text: \"GraphQL Typegen Documentation\",\n    url: \"https://www.gatsbyjs.com/docs/how-to/local-development/graphql-typegen/\",\n    color: \"#8954A8\",\n  }\n]\n\nconst badgeStyle = {\n  color: \"#fff\",\n  backgroundColor: \"#088413\",\n  border: \"1px solid #088413\",\n  fontSize: 11,\n  fontWeight: \"bold\",\n  letterSpacing: 1,\n  borderRadius: 4,\n  padding: \"4px 6px\",\n  display: \"inline-block\",\n  position: \"relative\" as \"relative\",\n  top: -2,\n  marginLeft: 10,\n  lineHeight: 1,\n}\n\nconst links = [\n  {\n    text: \"Tutorial\",\n    url: \"https://www.gatsbyjs.com/docs/tutorial/getting-started/\",\n    description:\n      \"A great place to get started if you're new to web development. Designed to guide you through setting up your first Gatsby site.\",\n    color: \"#E95800\",\n  },\n  {\n    text: \"How to Guides\",\n    url: \"https://www.gatsbyjs.com/docs/how-to/\",\n    description:\n      \"Practical step-by-step guides to help you achieve a specific goal. Most useful when you're trying to get something done.\",\n    color: \"#1099A8\",\n  },\n  {\n    text: \"Reference Guides\",\n    url: \"https://www.gatsbyjs.com/docs/reference/\",\n    description:\n      \"Nitty-gritty technical descriptions of how Gatsby works. Most useful when you need detailed information about Gatsby's APIs.\",\n    color: \"#BC027F\",\n  },\n  {\n    text: \"Conceptual Guides\",\n    url: \"https://www.gatsbyjs.com/docs/conceptual/\",\n    description:\n      \"Big-picture explanations of higher-level Gatsby concepts. Most useful for building understanding of a particular topic.\",\n    color: \"#0D96F2\",\n  },\n  {\n    text: \"Plugin Library\",\n    url: \"https://www.gatsbyjs.com/plugins\",\n    description:\n      \"Add functionality and customize your Gatsby site or app with thousands of plugins built by our amazing developer community.\",\n    color: \"#8EB814\",\n  },\n  {\n    text: \"Build and Host\",\n    url: \"https://www.gatsbyjs.com/cloud\",\n    badge: true,\n    description:\n      \"Now you’re ready to show the world! Give your Gatsby site superpowers: Build and host on Gatsby Cloud. Get started for free!\",\n    color: \"#663399\",\n  },\n]\n\n\n// const IndexPage: React.FC<PageProps> = () => {\n//   return (\n//     <main style={pageStyles}>\n//       <h1 style={headingStyles}>\n//         Congratulations\n//         <br />\n//         <span style={headingAccentStyles}>— you just made a Gatsby site! 🎉🎉🎉</span>\n//       </h1>\n//       <p style={paragraphStyles}>\n//         Edit <code style={codeStyles}>src/pages/index.tsx</code> to see this page\n//         update in real-time. 😎\n//         New line.\n//       </p>\n//       <ul style={doclistStyles}>\n//         {docLinks.map(doc => (\n//           <li key={doc.url} style={docLinkStyle}>\n//             <a\n//               style={linkStyle}\n//               href={`${doc.url}?utm_source=starter&utm_medium=ts-docs&utm_campaign=minimal-starter-ts`}\n//             >\n//               {doc.text}\n//             </a>\n//           </li>\n//         ))}\n//       </ul>\n//       <ul style={listStyles}>\n//         {links.map(link => (\n//           <li key={link.url} style={{ ...listItemStyles, color: link.color }}>\n//             <span>\n//               <a\n//                 style={linkStyle}\n//                 href={`${link.url}?utm_source=starter&utm_medium=start-page&utm_campaign=minimal-starter-ts`}\n//               >\n//                 {link.text}\n//               </a>\n//               {link.badge && (\n//                 <span style={badgeStyle} aria-label=\"New Badge\">\n//                   NEW!\n//                 </span>\n//               )}\n//               <p style={descriptionStyle}>{link.description}</p>\n//             </span>\n//           </li>\n//         ))}\n//       </ul>\n//       <img\n//         alt=\"Gatsby G Logo\"\n//         src=\"data:image/svg+xml,%3Csvg width='24' height='24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 2a10 10 0 110 20 10 10 0 010-20zm0 2c-3.73 0-6.86 2.55-7.75 6L14 19.75c3.45-.89 6-4.02 6-7.75h-5.25v1.5h3.45a6.37 6.37 0 01-3.89 4.44L6.06 9.69C7 7.31 9.3 5.63 12 5.63c2.13 0 4 1.04 5.18 2.65l1.23-1.06A7.959 7.959 0 0012 4zm-8 8a8 8 0 008 8c.04 0 .09 0-8-8z' fill='%23639'/%3E%3C/svg%3E\"\n//       />\n//     </main>\n//   )\n// }\n\n/////////////////////////\n// Gatsby Stuff\n\ntype DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\n\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <main>\n      <link rel=\"stylesheet\" href=\"https://use.typekit.net/som5rdn.css\"></link>\n      <>\n          <Navbar/>\n            <div className=\"home\">\n              {/* Hero */}\n              <div className='hero-container'>\n\n                <h1 className=\"adnd\" >Advanced Dungeons & Dragons 2nd Edition</h1>\n                <h2>Complete Monstrous <br/>Compendium</h2>\n\n                {/* Random Monster Button */}\n                <div className=\"random_monster_button\">\n                    <RandomMonsterButton />\n                </div>\n\n              </div>\n\n              {/* <div className=\"hero_tsr\">\n              <img src=\"images/tsr.png\" height=\"150px\" alt=\"TSR logo\"></img>\n              </div> */}\n              <Cards />\n\n              {/* Needs to be redone */}\n              <StatisticBlock />\n\n              <div className=\"summary\">\n                <div className=\"summary_banner_container\">\n                  <div className=\"summary_text\">\n                    <p className=\"summary_par\">\n            \n                    Welcome to the Complete Compendium! A work in progress, this compendium seeks to archive and catalogue every monster from Advanced Dungeons & Dragons, 2nd Edition. Not just monsters from the core books, not just from monstrous compendiums.  Every. Monster. Across all sources, magazines, and settings. Go to the Index for a full (and redundant) list of monster names and links to their pages, or check out the Catalogue for a more browsable experience. \n                    </p>\n                    <p className=\"summary_par\">\n                    This website has resurrected the efforts of an another, the creator of lomion.de, archived by the wayback machine. I coded an extractor for harvesting monster data from all these files and putting it into a database. Read more about my process on the About page.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          <Footer />\n        </>\n    </main>\n  )\n}\n\nexport default IndexPage\n\n// export const Head: HeadFC = () => <title>Home Page</title>\nexport function Head(props: HeadProps<DataProps>) {\n  return (\n    <title>{props.data.site.siteMetadata.title}</title>\n  )\n}\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["RandomMonsterButton","monster_key","setMonsterKey","useState","getRandomMonster","monsterKeys","Object","keys","AA_KEYS_TITLES","undefined","random_key","max","length","Math","floor","random","useEffect","React","className","Link","to","onClick","HomeCard","props","title","body","href","link","linkText","Cards","stats_json","require","Statistic","value","name","StatisticBlock","settings_number","books_number","pages_number","unique_number","IndexPage","rel","Navbar","Footer","Head","data","site","siteMetadata"],"sourceRoot":""}
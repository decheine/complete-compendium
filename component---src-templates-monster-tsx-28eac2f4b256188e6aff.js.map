{"version":3,"file":"component---src-templates-monster-tsx-28eac2f4b256188e6aff.js","mappings":"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","sources":["webpack://adnd-compendium-static-frontend/./src/templates/monster.tsx"],"sourcesContent":["import React from \"react\"\nimport Layout from '../components/Layout';\nimport {  PageProps, Link, HeadFC  } from \"gatsby\";\n\nimport { CreatePagesArgs } from 'gatsby';\nimport { Interweave } from \"interweave\";\n\n// Formatting\nimport \"@styles/SettingColors.css\"\n// import \"../styles/MonsterPage.css\"\nimport COLORS from '@styles/SettingColors'\nimport RandomMonsterButton from \"@components/RandomMonsterButton\";\n\nimport * as monsterPageStyles from \"@styles/modules/monsterpage.module.css\"\n\n// export default function Container({ children }) {\n//   return <div className={containerStyles.container}>{children}</div>\n// }\n\nconst cat_acronyms = require('@data/CatAcronyms.json')\nconst sorted_tsr = require('@data/sortedtsr.json')\n///////////\n// Styles\n\nconst settingImageStyle = {\n  float: \"right\",\n  width: \"150px\",\n}\n\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\ntype MonsterDataType = {\n    TSR: string[],\n    fullBody: string,\n    images: string[],\n    setting: string,\n    statblock: Object,\n    title: string\n}\n\ntype MonsterPageContext = {\n    monster_key: string\n    monster_data: MonsterDataType\n    sources: string[]\n    statblock_names: string[]\n    title: string\n    prev_key: string\n    next_key: string\n}\n\n\ntype MonsterDataWrapper = {\n    monster_page: MonsterPageContext\n    // workaround syntax warning fix,\n    // the following aren't used in reality, only\n    // monster_page\n    monster_key: string\n    monster_data: MonsterDataType\n    sources: string[]\n    statblock_names: string[]\n    title: string\n    prev_key: string\n    next_key: string\n}\n\ninterface Props {\n  pageContext: MonsterDataWrapper\n  }\n\nconst MonsterTemplate: React.FC<Props> = ({pageContext} ) => {\n  const monster_page_data: MonsterPageContext = pageContext\n  // console.log(monster_page_data)\n  // const monster_object = pageContext.monster_object\n//   console.log(\"monster page\")\n//   console.log(monster_page_data)\n  // console.log(\"monster template\")\n  // console.log(monster_object)\n  const monster_key = monster_page_data.monster_key\n  const title = monster_page_data.title\n  const sources = monster_page_data.sources\n  const previous_monster_key = monster_page_data.prev_key\n  const next_monster_key = monster_page_data.next_key\n//   console.log(previous_monster_key, next_monster_key)\n  // Checking Main Image\n  //  If the regex pattern matches, know we NEED an image. So set the url to where it should be with monster_key\n  //  and also have an onerror=\"javascript:this.src='images/default.jpg'\" to set the image to default if it doesn't exist\n  //  If doesn't need image, set the bool flag and no image will be rendered\n  let monster_image = null;\n  let needs_image = true;\n  let image_url = \"\";\n  // if(monster_page_data.monster_data.images[1]) regex contains monster_key\n  if(monster_page_data.monster_data.images[1] && monster_page_data.monster_data.images[1].match(new RegExp(monster_page_data.monster_key, \"g\"))){\n      // console.log(\"Should have image\")\n      needs_image = true;\n  } else {\n      // console.log(\"Does not have image\")\n      needs_image = false;\n  }\n\n  if(needs_image){\n      // Set image url\n      image_url = \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\"\n      let image_placeholder = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n\n      monster_image = <img className={monsterPageStyles.monsterImage}   src={image_url}\n      alt={monster_page_data.monster_data.title} \n      title={monster_page_data.monster_data.title} \n      onError={({currentTarget}) => {\n          currentTarget.onerror = null;\n          currentTarget.alt = \"This monster is missing it's image. It will be found eventually.\";\n          currentTarget.src = image_placeholder;\n          currentTarget.title = \"Missing image of \" + monster_page_data.monster_data.title;\n      }}/>\n\n  } \n    \n  // Change document title to monster title\n  if(typeof document !== 'undefined'){\n      document.title = monster_page_data.monster_data.title + \" - Complete Compendium\";\n  }\n\n  // Handle setting and accent color.\n  const setting_name = monster_page_data.monster_data.setting;\n  const setting_acr = cat_acronyms[setting_name]\n  var hrClass = \"hr2\"\n  var titleStyle = {}\n  if(setting_acr){\n      hrClass = \"hr2-\" + setting_acr\n      const colorVar = \"--color-\" + setting_acr\n      titleStyle = {color: COLORS.get(setting_acr)}\n  }\n\n  // Title style\n\n  const fullBody = monster_page_data.monster_data.fullBody;\n\n  if(monster_key == \"horax\"){\n    console.log(\"appendix template monster, HORAX\")\n    console.log(pageContext)\n    console.log(\"prev\", previous_monster_key)\n    console.log(\"next\", next_monster_key)\n  }\n\n  // const { book_data } = data\n  return (\n    <Layout url={`/appendix/${monster_key}`}>\n      <div>\n        <div>\n          <div className={monsterPageStyles.monsterNavLinks}>\n            <div className={monsterPageStyles.monsterNav}>\n                <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + previous_monster_key}>Previous</Link>\n            </div>\n            {/* Random Monster */}\n            <div className={monsterPageStyles.monsterNav}>\n                <RandomMonsterButton />\n            </div>\n            <div className={monsterPageStyles.monsterNav}>\n                <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + next_monster_key}>Next</Link>\n            </div>\n          </div>\n        </div>\n\n      {/* TITLE */}\n      <div className={monsterPageStyles.topHeader}>\n          <h1 style={titleStyle}>{monster_page_data.monster_data.title}</h1>\n          <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting]}>\n              <img className={monsterPageStyles.settingImage} src={`/img_settings/${cat_acronyms[monster_page_data.monster_data.setting]}.gif`}  alt={monster_page_data.monster_data.setting + \"Campaign Setting Logo\"} title={monster_page_data.monster_data.setting}/>\n          </Link>\n      </div>\n      \n      <hr className ={hrClass}/>\n      <hr className ={monsterPageStyles.hr1}/>\n\n      <div className={monsterPageStyles.monsterImgFrame}>\n      {monster_image}\n      </div>\n\n      <Interweave className=\"interweave\" content={fullBody} />\n\n      {/* TSR Array */}\n      <div className={monsterPageStyles.sourceList}>\n        <div className={monsterPageStyles.tsrLabel}>\n            Sourcebooks:\n        </div>\n        <div className={monsterPageStyles.tsr}>\n            {\n                (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                        return (\n                            <div key={tsr}>\n                                <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting] + \"/\" + tsr}>{sorted_tsr[tsr]} ({tsr})</Link>\n                                <br/>\n                            </div>\n                        )\n                    }\n                )\n                : \"No TSR\"\n            }\n        </div>\n    </div>\n\n    {/* LAST MODIFIED */}\n    {/* <div className=\"last-modified\">\n        Last Modified: {monster_page_data.updatedAt}\n    </div> */}\n\n\n\n\n      </div>\n    </Layout>\n  )\n}\n\nexport default MonsterTemplate"],"names":["cat_acronyms","require","sorted_tsr","_ref","pageContext","monster_page_data","monster_key","previous_monster_key","title","sources","prev_key","next_monster_key","next_key","monster_image","needs_image","image_url","monster_data","images","match","RegExp","image_placeholder","React","className","monsterPageStyles","src","alt","onError","_ref2","currentTarget","onerror","document","setting_name","setting","setting_acr","hrClass","titleStyle","color","COLORS","get","fullBody","console","log","Layout","url","Link","to","RandomMonsterButton","style","Interweave","content","hasOwnProperty","map","tsr","key"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-monster-tsx-fff44aa498da1330f950.js","mappings":"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","sources":["webpack://complete-compendium/./src/components/regex_description.ts","webpack://complete-compendium/./src/templates/monster.tsx"],"sourcesContent":["\n\nfunction getMonsterDescription(monster_key: string, fullBodyString: string): string {\n    let description = \"\"\n    const regexp = /<p class=\\\"f\\\">([^<].+?)<\\/p>/;\n    // const regexp = /(<p class=\\\\\"f\\\\\">)/gm;\n    // const regexp = /(<p class)/gm;\n    // const regexp = /<p class=/;\n    // const matches = fullBodyString.matchAll(regexp);\n    const match = fullBodyString.match(regexp)\n    // for (const match of fullBodyString.matchAll(regexp)) {\n    //   console.log(`Match! ${match[1]}`);\n    // }\n    if(match !== null){\n      if(match[1]){\n        description = match[1]  \n      }\n      // console.log(\"Match found!\")\n    } \n    // console.log(\"Description for: \", monster_key)\n    \n    // Filter html blocks\n    description = description.replace(/<.*?>/g, \"\")\n    \n    // console.log(description)\n    return description\n  }\n\nexport default getMonsterDescription;","import React from \"react\"\n// import { useEffect, useState } from 'react'\n\nimport Layout from '../components/Layout';\nimport {  PageProps, Link, HeadFC, HeadProps, graphql  } from \"gatsby\";\n\nimport { CreatePagesArgs } from 'gatsby';\nimport { Interweave } from \"interweave\";\n\n// Formatting\nimport \"@styles/SettingColors.css\"\n// import \"../styles/MonsterPage.css\"\nimport COLORS from '@styles/SettingColors'\nimport RandomMonsterButton from \"@components/RandomMonsterButton\";\n\nimport * as monsterPageStyles from \"@styles/modules/monsterpage.module.css\"\n\nimport getMonsterDescription from \"@components/regex_description\"\nimport { polyfill } from 'interweave-ssr';\n\npolyfill();\n// const isBrowser = typeof window !== \"undefined\"\n\nconst cat_acronyms = require('@data/CatAcronyms.json')\n// const sorted_tsr = require('@data/sortedtsr.json')\nconst publishId_to_acronym = require('@data/publishId_to_acronym.json')\n\nconst all_tsr = require('../../data/all_tsr.json')\n///////////\n// Styles\n\nconst settingImageStyle = {\n  float: \"right\",\n  width: \"150px\",\n}\n\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\ntype MonsterDataType = {\n    TSR: string[],\n    fullBody: string,\n    images: string[],\n    setting: string,\n    statblock: Object,\n    title: string\n}\n\ntype MonsterPageContext = {\n    monster_key: string\n    monster_data: MonsterDataType\n    sources: string[]\n    statblock_names: string[]\n    title: string\n    prev_key: string\n    next_key: string\n    monster_path: string\n    // intereweave_body: JSX.Element\n}\n\ninterface Props {\n  pageContext: MonsterPageContext\n  }\n\n\n\n\nconst MonsterTemplate: React.FC<Props> = ( {pageContext} ) => {\n//   const [screenSize, setScreenSize] = useState(getCurrentDimension());\n\n//   function getCurrentDimension(){\n//     if(isBrowser){\n\n//       return {\n//         width: global.window.innerWidth,\n//       \theight: global.window.innerHeight\n//       }\n//     } else {\n//       return {\n//         width: 0,\n//         height: 0,\n//       }\n//     }\n// }\n\n//   useEffect(() => {\n//     const updateDimension = () => {\n//       setScreenSize(getCurrentDimension())\n//     }\n//     if(isBrowser)\n//       global.window.addEventListener('resize', updateDimension);\n    \n//     return(() => {\n//         global.window.removeEventListener('resize', updateDimension);\n//     })\n//   }, [screenSize])\n\n\n  const monster_page_data: MonsterPageContext = pageContext\n  // console.log(monster_page_data)\n  // const monster_object = pageContext.monster_object\n//   console.log(\"monster page\")\n//   console.log(monster_page_data)\n  // console.log(\"monster template\")\n  // console.log(monster_object)\n  const monster_key = monster_page_data.monster_key\n  const title = monster_page_data.title\n  const sources = monster_page_data.sources\n  const previous_monster_key = monster_page_data.prev_key\n  const next_monster_key = monster_page_data.next_key\n\n  const fullBody = monster_page_data.monster_data.fullBody;\n  // Getting the fullbody data and putting it into React state\n  // to prevent hydration issue on refresh\n\n  // const [interweave_body, setInterweave] = useState<JSX.Element>();\n\n  // Data does't start loading\n  // until *after* Parent is mounted\n  // useEffect(() => {\n  //   setInterweave(<Interweave className=\"interweave\" content={fullBody} />)\n  // }, []);\n\n\n  //   console.log(previous_monster_key, next_monster_key)\n  // Checking Main Image\n  //  If the regex pattern matches, know we NEED an image. So set the url to where it should be with monster_key\n  //  and also have an onerror=\"javascript:this.src='images/default.jpg'\" to set the image to default if it doesn't exist\n  //  If doesn't need image, set the bool flag and no image will be rendered\n  let monster_image = null;\n  let needs_image = true;\n  let image_url = \"\";\n  // if(monster_page_data.monster_data.images[1]) regex contains monster_key\n  if(monster_page_data.monster_data.images[1] && monster_page_data.monster_data.images[1].match(new RegExp(monster_page_data.monster_key, \"g\"))){\n      // console.log(\"Should have image\")\n      needs_image = true;\n  } else {\n      // console.log(\"Does not have image\")\n      needs_image = false;\n  }\n\n  if(needs_image){\n      // Set image url\n      image_url = \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\"\n      let image_placeholder = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n\n      monster_image = <img className={monsterPageStyles.monsterImage}   src={image_url}\n      alt={monster_page_data.monster_data.title} \n      title={monster_page_data.monster_data.title} \n      onError={({currentTarget}) => {\n          currentTarget.onerror = null;\n          currentTarget.alt = \"This monster is missing it's image. It will be found eventually.\";\n          currentTarget.src = image_placeholder;\n          currentTarget.title = \"Missing image of \" + monster_page_data.monster_data.title;\n      }}/>\n\n  } \n    \n  // Change document title to monster title\n  // if(typeof document !== 'undefined'){\n  //     // document.title = monster_page_data.monster_data.title + \" - Complete Compendium\";\n  // }\n\n  // Handle setting and accent color.\n  const setting_name = monster_page_data.monster_data.setting;\n  const setting_acr = cat_acronyms[setting_name]\n  var hrClass = \"hr2\"\n  var titleStyle = {}\n  if(setting_acr){\n      hrClass = \"hr2-\" + setting_acr\n      const colorVar = \"--color-\" + setting_acr\n      titleStyle = {color: COLORS.get(setting_acr)}\n  }\n\n  // Title style\n\n  // const interweaveMonsterBody: JSX.Element = <div className=\"set-html\" dangerouslySetInnerHTML={{__html: fullBody}} />\n\n  let monsterNavWidgets: JSX.Element =\n  <div>\n    <div className={monsterPageStyles.monsterNavLinks}>\n      <div className={monsterPageStyles.pageRandomMonsterButton}>\n        <RandomMonsterButton home={false} />\n      </div>\n      <div className={monsterPageStyles.horizontalMonsterLinks}>\n        <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + previous_monster_key}>\n          <div className={monsterPageStyles.monsterNav}>\n              Previous\n          </div>\n        </Link>\n        {/* Random Monster */}\n        {/* <div className={monsterPageStyles.monsterNav}>\n            <RandomMonsterButton />\n          </div> */}\n        <Link className={monsterPageStyles.monsterNavLink} to={\"../\" + next_monster_key}>\n          <div className={monsterPageStyles.monsterNav}>\n            Next\n          </div>\n        </Link>\n      </div>\n    </div>\n  </div>\n\n  const test_jsx: JSX.Element = <div>Test JSX Element</div>\n\n\n  // const { book_data } = data\n  return (\n    <>\n    \n    {/* <Head title={monster_page_data.monster_data.title} description={`Description for ${monster_page_data.monster_data.title}`} /> */}\n    <Layout url={`/appendix/${monster_key}`}>\n      <div>\n        {monsterNavWidgets}\n\n\n      {/* TITLE */}\n      <div className={monsterPageStyles.topHeader}>\n          <h1 style={titleStyle}>{monster_page_data.monster_data.title}</h1>\n          <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting]}>\n              <img className={monsterPageStyles.settingImage} src={`/img_settings/${cat_acronyms[monster_page_data.monster_data.setting]}.gif`}  alt={monster_page_data.monster_data.setting + \"Campaign Setting Logo\"} title={monster_page_data.monster_data.setting}/>\n          </Link>\n      </div>\n      \n      <hr className ={monsterPageStyles.hr1}/>\n      <hr className ={hrClass}/>\n\n      <div className={monsterPageStyles.monsterImgFrame}>\n      {monster_image}\n      </div>\n\n      <Interweave className=\"interweave\" content={fullBody} />\n      {/* {interweaveMonsterBody} */}\n\n      {/* <Interweave content=\"This string contains <b>HTML</b> and will safely be rendered!\" /> */}\n      {/* {test_jsx} */}\n      {/* TSR Array */}\n      <div className={monsterPageStyles.sourceList}>\n        <div className={monsterPageStyles.tsrLabel}>\n            Sourcebooks:\n        </div>\n        <div className={monsterPageStyles.tsr}>\n            {\n                (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                        return (\n                            <div key={tsr}>\n                                <Link to={\"/catalog/\" + publishId_to_acronym[tsr] + \"/\" + tsr}>{all_tsr[tsr]?.title} ({tsr})</Link>\n                                <br/>\n                            </div>\n                        )\n                    }\n                )\n                : \"No TSR\"\n            }\n        </div>\n    </div>\n\n    {/* LAST MODIFIED */}\n    {/* <div className=\"last-modified\">\n        Last Modified: {monster_page_data.updatedAt}\n    </div> */}\n\n\n\n\n      </div>\n    </Layout>\n    </>\n  )\n}\n\n// interface HeadProps {\n//   location: any,\n//   params: any,\n//   data: any,\n//   pageContext: MonsterPageContext\n// }\n\n\n\n// export function Head ({ location, params, data, pageContext }: HeadProps) => (\n//   <>\n//     <title>{pageContext.title}</title>\n//     <meta name=\"description\" content={data.page.description} />\n//     <meta\n//       name=\"twitter:url\"\n//       content={`https://www.foobar.tld/${location.pathname}`}\n//     />\n//   </>\n// )\n\n// export function Head(props: HeadProps<DataProps>){\n\n//   // Extract description.\n\n//   // Demo description for now.\n\n//   const monster_desc = `Description for ${props.data.sitePage.pageContext.title}`\n//   console.log(\"Head\", props.data.sitePage.pageContext)\n\n//   return (\n//     <>\n//       <title>{props.data.sitePage.pageContext.title}</title>\n//       <meta name=\"description\" content={monster_desc} />\n//     </>\n//   )\n// }\n\n\n\n// export const Head = () => (\n//   <>\n//     <title>Hello World</title>\n//     <meta name=\"description\" content=\"Hello World\" />\n//   </>\n// )\n\n// Function that takes in a fullBody string and \n// returns the monster description (first paragraph) \n//  \n\n\n\nexport const Head: React.FC<Props> = ({ pageContext }) => (\n  <>\n    <title>{pageContext.title + \" - AD&D Complete Compendium\"}</title>\n    <meta property=\"og:site_name\" content=\"AD&D 2nd Edition Complete Monstrous Compendium\"/>\n    <meta property=\"og:title\" content={pageContext.monster_data.title  + \" | AD&D Complete Compendium\"}/>\n    <meta property=\"og:description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) }/>\n    <meta property=\"og:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path}/>\n    <meta property=\"og:type\" content=\"website\"/>\n    {\n      pageContext.monster_data.images[1] && pageContext.monster_data.images[1].match(new RegExp(pageContext.monster_key, \"g\")) ?\n      <>\n      <meta property=\"og:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n      <meta name=\"twitter:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n    </>\n      :\n      <></>\n    }\n    <meta property=\"og:image:width\" content=\"300\"/>\n    <meta property=\"og:image:height\" content=\"360\"/>\n    \n          \n    {/* <meta name=\"description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } /> */}\n    {/* Image: \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\" */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n    <meta name=\"twitter:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path} />\n    <meta name=\"twitter:title\" content=\"Advanced Dungeons & Dragons 2nd Edition Complete Compendium\" />\n    <meta name=\"twitter:description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } />\n        \n  </>\n)\n\nexport default MonsterTemplate\n\nexport const query = graphql`\n  {\n    sitePage {\n      pageContext\n    }\n  }\n`"],"names":["monster_key","fullBodyString","description","match","replace","polyfill","cat_acronyms","require","publishId_to_acronym","all_tsr","Head","_ref3","pageContext","React","title","property","content","monster_data","getMonsterDescription","fullBody","monster_path","images","RegExp","name","_ref","monster_page_data","previous_monster_key","sources","prev_key","next_monster_key","next_key","monster_image","needs_image","image_url","image_placeholder","className","monsterPageStyles","src","alt","onError","_ref2","currentTarget","onerror","setting_name","setting","setting_acr","hrClass","titleStyle","color","COLORS","get","monsterNavWidgets","RandomMonsterButton","home","Link","to","Layout","url","style","Interweave","hasOwnProperty","map","tsr","_all_tsr$tsr","key"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-printmonster-tsx-b80d80ea0f31a597fc9f.js","mappings":"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","sources":["webpack://complete-compendium/./src/styles/modules/monsterprintpage.module.css","webpack://complete-compendium/./src/templates/printmonster.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var RandomMonsterButton = \"monsterprintpage-module--RandomMonsterButton--a8e6a\";\nexport var StatblockImage = \"monsterprintpage-module--Statblock-Image--26496\";\nexport var bk = \"monsterprintpage-module--bk--c46fe\";\nexport var bodyBlocks = \"monsterprintpage-module--body-blocks--343a0\";\nexport var cn = \"monsterprintpage-module--cn--712d3\";\nexport var columnWrapper = \"monsterprintpage-module--column-wrapper--232bb\";\nexport var f = \"monsterprintpage-module--f--71901\";\nexport var fi = \"monsterprintpage-module--fi--c1d89\";\nexport var footnoteList = \"monsterprintpage-module--footnote-list--cc2b1\";\nexport var footnotes = \"monsterprintpage-module--footnotes--5cc12\";\nexport var horizontalMonsterLinks = \"monsterprintpage-module--horizontal-monster-links--5aebc\";\nexport var hr1 = \"monsterprintpage-module--hr1--5a5ce\";\nexport var interweave = \"monsterprintpage-module--interweave--fdfb3\";\nexport var ip = \"monsterprintpage-module--ip--861c6\";\nexport var lastModified = \"monsterprintpage-module--last-modified--e97e0\";\nexport var loading = \"monsterprintpage-module--loading--869d0\";\nexport var monsterBody = \"monsterprintpage-module--monster-body--ace7c\";\nexport var monsterImage = \"monsterprintpage-module--monster-image--7c6c2\";\nexport var monsterImgFrame = \"monsterprintpage-module--monster-img-frame--b00e6\";\nexport var monsterNav = \"monsterprintpage-module--monster-nav--6d507\";\nexport var monsterNavLink = \"monsterprintpage-module--monster-nav-link--227c2\";\nexport var monsterNavLinks = \"monsterprintpage-module--monster-nav-links--4617d\";\nexport var ni = \"monsterprintpage-module--ni--65d6a\";\nexport var pageRandomMonsterButton = \"monsterprintpage-module--page-random-monster-button--e66d8\";\nexport var psionicTableData = \"monsterprintpage-module--psionic-table-data--d8003\";\nexport var psionicsSummary = \"monsterprintpage-module--psionics-summary--85ee7\";\nexport var psionicsTable = \"monsterprintpage-module--psionics-table--87a00\";\nexport var settingImage = \"monsterprintpage-module--setting-image--c814e\";\nexport var source = \"monsterprintpage-module--source--aabac\";\nexport var sourceList = \"monsterprintpage-module--source-list--29f20\";\nexport var statblock = \"monsterprintpage-module--statblock--f290c\";\nexport var topHeader = \"monsterprintpage-module--top-header--4cda8\";\nexport var topHeaderInner = \"monsterprintpage-module--top-header-inner--5c887\";\nexport var tsr = \"monsterprintpage-module--tsr--45b11\";\nexport var tsrFooter = \"monsterprintpage-module--tsr-footer--8265f\";\nexport var tsrLabel = \"monsterprintpage-module--tsr-label--48ea6\";\nexport var tsrPrint = \"monsterprintpage-module--tsr-print--72d02\";","import React from \"react\"\n// import { useEffect, useState } from 'react'\n\nimport Layout from '../components/Layout';\nimport { PageProps, Link, HeadFC, HeadProps, graphql } from \"gatsby\";\n\nimport { CreatePagesArgs } from 'gatsby';\nimport { Interweave } from \"interweave\";\n\n// Formatting\nimport \"@styles/SettingColors.css\"\nimport COLORS from '@styles/SettingColors'\n// import RandomMonsterButton from \"@components/RandomMonsterButton\";\n\nimport * as monsterPageStyles from \"@styles/modules/monsterprintpage.module.css\"\nimport \"@styles/modules/monsterprintpage.module.css\"\n\nimport getMonsterDescription from \"@components/regex_description\"\nimport { polyfill } from 'interweave-ssr';\n\npolyfill();\n// const isBrowser = typeof window !== \"undefined\"\n\nconst cat_acronyms = require('@data/CatAcronyms.json')\n// const sorted_tsr = require('@data/sortedtsr.json')\nconst publishId_to_acronym = require('@data/publishId_to_acronym.json')\n\nconst all_tsr = require('../../data/all_tsr.json')\n///////////\n// Styles\n\nconst settingImageStyle = {\n  float: \"right\",\n  width: \"150px\",\n}\n\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\ntype MonsterDataType = {\n  TSR: string[],\n  fullBody: string,\n  images: string[],\n  setting: string,\n  statblock: Object,\n  title: string\n}\n\ntype MonsterPageContext = {\n  monster_key: string\n  monster_data: MonsterDataType\n  sources: string[]\n  statblock_names: string[]\n  title: string\n  prev_key: string\n  next_key: string\n  monster_path: string\n  // intereweave_body: JSX.Element\n}\n\ninterface Props {\n  pageContext: MonsterPageContext\n}\n\n\n\n\nconst PrintMonsterTemplate: React.FC<Props> = ({ pageContext }) => {\n\n  const monster_page_data: MonsterPageContext = pageContext\n  const monster_key = monster_page_data.monster_key\n  const title = monster_page_data.title\n  const sources = monster_page_data.sources\n  const previous_monster_key = monster_page_data.prev_key\n  const next_monster_key = monster_page_data.next_key\n  let fullBody = monster_page_data.monster_data.fullBody;\n\n  let monster_image = <></>;\n  let needs_image = true;\n  let image_url = \"\";\n  // if(monster_page_data.monster_data.images[1]) regex contains monster_key\n  let main_img_pattern = \"img/\" + monster_page_data.monster_key\n  if (monster_page_data.monster_data.images[1] && monster_page_data.monster_data.images[1].match(new RegExp(main_img_pattern, \"g\"))) {\n    needs_image = true;\n  } else {\n    needs_image = false;\n  }\n\n  if (needs_image) {\n    // Set image url\n    image_url = \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\"\n    let image_placeholder = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n\n    monster_image = \n    <div className={monsterPageStyles.monsterImgFrame}>\n    <img className={monsterPageStyles.monsterImage} src={image_url}\n      alt={monster_page_data.monster_data.title}\n      title={monster_page_data.monster_data.title}\n      onError={({ currentTarget }) => {\n        currentTarget.onerror = null;\n        currentTarget.alt = \"This monster is missing it's image. It will be found eventually.\";\n        currentTarget.src = image_placeholder;\n        currentTarget.title = \"Missing image of \" + monster_page_data.monster_data.title;\n      }} /></div>\n  } else {\n    // Handle Statblock column span if there is no image.\n    fullBody = fullBody.slice(0,9) + \" style=\\\"column-span: all;\\\"\" + fullBody.slice(9);\n\n  }\n\n  // Handle setting and accent color.\n  const setting_name = monster_page_data.monster_data.setting;\n  const setting_acr = cat_acronyms[setting_name]\n  var hrClass = \"hr2\"\n  var titleStyle = {}\n  if (setting_acr) {\n    hrClass = \"hr2-\" + setting_acr\n    const colorVar = \"--color-\" + setting_acr\n    titleStyle = { color: COLORS.get(setting_acr) }\n  }\n\n\n\n  return (\n    <>\n      <div className=\"print\" >\n        {/* TITLE */}\n        <div className={monsterPageStyles.topHeader}>\n          <div className={monsterPageStyles.topHeaderInner}>\n            <h1 style={titleStyle}>{monster_page_data.monster_data.title}</h1>\n            <div className={monsterPageStyles.tsrPrint}>\n                {\n                  (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                      return (\n                        <div key={tsr} className={monsterPageStyles.source}>\n                          {tsr}\n                          <br />\n                        </div>\n                      )\n                    }\n                    ) : \"No TSR\"\n                }\n              </div>\n            <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting]}>\n              <img className={monsterPageStyles.settingImage} src={`/img_settings/${cat_acronyms[monster_page_data.monster_data.setting]}.gif`} alt={monster_page_data.monster_data.setting + \"Campaign Setting Logo\"} title={monster_page_data.monster_data.setting} />\n            </Link>\n          </div>\n          <hr className={monsterPageStyles.hr1} />\n          <hr className={hrClass} />\n\n        </div>\n        <article>\n\n\n          <div className={monsterPageStyles.columnWrapper}>\n            {monster_image}\n            <Interweave className=\"interweave\" content={fullBody} />\n            {/* {interweaveMonsterBody} */}\n\n            {/* <Interweave content=\"This string contains <b>HTML</b> and will safely be rendered!\" /> */}\n            {/* {test_jsx} */}\n            {/* TSR Array */}\n            <div className={monsterPageStyles.sourceList}>\n              <div className={monsterPageStyles.tsrLabel}>\n              </div>\n              <div className={monsterPageStyles.tsr}>\n                {\n                  (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                      return (\n                        <div key={tsr} className={monsterPageStyles.source}>\n                          {all_tsr[tsr]?.title} ({tsr})\n                          <br />\n                        </div>\n                      )\n                    }\n                    ) : \"No TSR\"\n                }\n              </div>\n            </div>\n\n          </div>\n        </article>\n        {/* LAST MODIFIED */}\n        {/* <div className=\"last-modified\">\n        Last Modified: {monster_page_data.updatedAt}\n    </div> */}\n\n\n\n\n      </div>\n    </>\n  )\n}\n\n// interface HeadProps {\n//   location: any,\n//   params: any,\n//   data: any,\n//   pageContext: MonsterPageContext\n// }\n\n\n\n// export function Head ({ location, params, data, pageContext }: HeadProps) => (\n//   <>\n//     <title>{pageContext.title}</title>\n//     <meta name=\"description\" content={data.page.description} />\n//     <meta\n//       name=\"twitter:url\"\n//       content={`https://www.foobar.tld/${location.pathname}`}\n//     />\n//   </>\n// )\n\n// export function Head(props: HeadProps<DataProps>){\n\n//   // Extract description.\n\n//   // Demo description for now.\n\n//   const monster_desc = `Description for ${props.data.sitePage.pageContext.title}`\n//   console.log(\"Head\", props.data.sitePage.pageContext)\n\n//   return (\n//     <>\n//       <title>{props.data.sitePage.pageContext.title}</title>\n//       <meta name=\"description\" content={monster_desc} />\n//     </>\n//   )\n// }\n\n\n\n// export const Head = () => (\n//   <>\n//     <title>Hello World</title>\n//     <meta name=\"description\" content=\"Hello World\" />\n//   </>\n// )\n\n// Function that takes in a fullBody string and \n// returns the monster description (first paragraph) \n//  \n\n\n\nexport const Head: React.FC<Props> = ({ pageContext }) => (\n  <>\n  </>\n)\n\nexport default PrintMonsterTemplate\n\nexport const query = graphql`\n  {\n    sitePage {\n      pageContext\n    }\n  }\n`"],"names":["source","polyfill","cat_acronyms","require","all_tsr","Head","_ref3","pageContext","React","_ref","monster_page_data","monster_key","title","sources","prev_key","next_key","fullBody","monster_data","monster_image","needs_image","image_url","main_img_pattern","images","match","RegExp","image_placeholder","className","src","alt","onError","_ref2","currentTarget","onerror","slice","setting_name","setting","setting_acr","hrClass","titleStyle","color","COLORS","get","style","hasOwnProperty","map","tsr","key","monsterPageStyles","Link","to","Interweave","content","_all_tsr$tsr"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-printmonster-tsx-45c19e02de85b04e94cd.js","mappings":"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","sources":["webpack://complete-compendium/./src/components/regex_description.ts","webpack://complete-compendium/./src/styles/modules/monsterprintpage.module.css","webpack://complete-compendium/./src/templates/printmonster.tsx"],"sourcesContent":["\n\nfunction getMonsterDescription(monster_key: string, fullBodyString: string): string {\n    let description = \"\"\n    const regexp = /<p class=\\\"f\\\">([^<].+?)<\\/p>/;\n    // const regexp = /(<p class=\\\\\"f\\\\\">)/gm;\n    // const regexp = /(<p class)/gm;\n    // const regexp = /<p class=/;\n    // const matches = fullBodyString.matchAll(regexp);\n    const match = fullBodyString.match(regexp)\n    // for (const match of fullBodyString.matchAll(regexp)) {\n    //   console.log(`Match! ${match[1]}`);\n    // }\n    if(match !== null){\n      if(match[1]){\n        description = match[1]  \n      }\n      // console.log(\"Match found!\")\n    } \n    // console.log(\"Description for: \", monster_key)\n    \n    // Filter html blocks\n    description = description.replace(/<.*?>/g, \"\")\n    \n    // console.log(description)\n    return description\n  }\n\nexport default getMonsterDescription;","// extracted by mini-css-extract-plugin\nexport var RandomMonsterButton = \"monsterprintpage-module--RandomMonsterButton--a8e6a\";\nexport var StatblockImage = \"monsterprintpage-module--Statblock-Image--26496\";\nexport var bk = \"monsterprintpage-module--bk--c46fe\";\nexport var bodyBlocks = \"monsterprintpage-module--body-blocks--343a0\";\nexport var cn = \"monsterprintpage-module--cn--712d3\";\nexport var columnWrapper = \"monsterprintpage-module--column-wrapper--232bb\";\nexport var f = \"monsterprintpage-module--f--71901\";\nexport var fi = \"monsterprintpage-module--fi--c1d89\";\nexport var footnoteList = \"monsterprintpage-module--footnote-list--cc2b1\";\nexport var footnotes = \"monsterprintpage-module--footnotes--5cc12\";\nexport var horizontalMonsterLinks = \"monsterprintpage-module--horizontal-monster-links--5aebc\";\nexport var hr1 = \"monsterprintpage-module--hr1--5a5ce\";\nexport var interweave = \"monsterprintpage-module--interweave--fdfb3\";\nexport var ip = \"monsterprintpage-module--ip--861c6\";\nexport var lastModified = \"monsterprintpage-module--last-modified--e97e0\";\nexport var loading = \"monsterprintpage-module--loading--869d0\";\nexport var monsterBody = \"monsterprintpage-module--monster-body--ace7c\";\nexport var monsterImage = \"monsterprintpage-module--monster-image--7c6c2\";\nexport var monsterImgFrame = \"monsterprintpage-module--monster-img-frame--b00e6\";\nexport var monsterNav = \"monsterprintpage-module--monster-nav--6d507\";\nexport var monsterNavLink = \"monsterprintpage-module--monster-nav-link--227c2\";\nexport var monsterNavLinks = \"monsterprintpage-module--monster-nav-links--4617d\";\nexport var ni = \"monsterprintpage-module--ni--65d6a\";\nexport var pageRandomMonsterButton = \"monsterprintpage-module--page-random-monster-button--e66d8\";\nexport var psionicTableData = \"monsterprintpage-module--psionic-table-data--d8003\";\nexport var psionicsSummary = \"monsterprintpage-module--psionics-summary--85ee7\";\nexport var psionicsTable = \"monsterprintpage-module--psionics-table--87a00\";\nexport var settingImage = \"monsterprintpage-module--setting-image--c814e\";\nexport var source = \"monsterprintpage-module--source--aabac\";\nexport var sourceList = \"monsterprintpage-module--source-list--29f20\";\nexport var statblock = \"monsterprintpage-module--statblock--f290c\";\nexport var topHeader = \"monsterprintpage-module--top-header--4cda8\";\nexport var topHeaderInner = \"monsterprintpage-module--top-header-inner--5c887\";\nexport var tsr = \"monsterprintpage-module--tsr--45b11\";\nexport var tsrFooter = \"monsterprintpage-module--tsr-footer--8265f\";\nexport var tsrLabel = \"monsterprintpage-module--tsr-label--48ea6\";\nexport var tsrPrint = \"monsterprintpage-module--tsr-print--72d02\";","import React from \"react\"\n// import { useEffect, useState } from 'react'\n\nimport Layout from '../components/Layout';\nimport { PageProps, Link, HeadFC, HeadProps, graphql } from \"gatsby\";\n\nimport { CreatePagesArgs } from 'gatsby';\nimport { Interweave } from \"interweave\";\n\n// Formatting\nimport \"@styles/SettingColors.css\"\nimport COLORS from '@styles/SettingColors'\n// import RandomMonsterButton from \"@components/RandomMonsterButton\";\n\nimport * as monsterPageStyles from \"@styles/modules/monsterprintpage.module.css\"\nimport \"@styles/modules/monsterprintpage.module.css\"\n\nimport getMonsterDescription from \"@components/regex_description\"\nimport { polyfill } from 'interweave-ssr';\n\npolyfill();\n// const isBrowser = typeof window !== \"undefined\"\n\nconst cat_acronyms = require('@data/CatAcronyms.json')\n// const sorted_tsr = require('@data/sortedtsr.json')\nconst publishId_to_acronym = require('@data/publishId_to_acronym.json')\n\nconst all_tsr = require('../../data/all_tsr.json')\n///////////\n// Styles\n\nconst settingImageStyle = {\n  float: \"right\",\n  width: \"150px\",\n}\n\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\ntype MonsterDataType = {\n  TSR: string[],\n  fullBody: string,\n  images: string[],\n  setting: string,\n  statblock: Object,\n  title: string\n}\n\ntype MonsterPageContext = {\n  monster_key: string\n  monster_data: MonsterDataType\n  sources: string[]\n  statblock_names: string[]\n  title: string\n  prev_key: string\n  next_key: string\n  monster_path: string\n  // intereweave_body: JSX.Element\n}\n\ninterface Props {\n  pageContext: MonsterPageContext\n}\n\n\n\n\nconst PrintMonsterTemplate: React.FC<Props> = ({ pageContext }) => {\n\n  const monster_page_data: MonsterPageContext = pageContext\n  const monster_key = monster_page_data.monster_key\n  const title = monster_page_data.title\n  const sources = monster_page_data.sources\n  const previous_monster_key = monster_page_data.prev_key\n  const next_monster_key = monster_page_data.next_key\n  let fullBody = monster_page_data.monster_data.fullBody;\n\n  let monster_image = <></>;\n  let needs_image = true;\n  let image_url = \"\";\n  // if(monster_page_data.monster_data.images[1]) regex contains monster_key\n  let main_img_pattern = \"img/\" + monster_page_data.monster_key\n  if (monster_page_data.monster_data.images[1] && monster_page_data.monster_data.images[1].match(new RegExp(main_img_pattern, \"g\"))) {\n    needs_image = true;\n  } else {\n    needs_image = false;\n  }\n\n  if (needs_image) {\n    // Set image url\n    image_url = \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\"\n    let image_placeholder = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n\n    monster_image = \n    <div className={monsterPageStyles.monsterImgFrame}>\n    <img className={monsterPageStyles.monsterImage} src={image_url}\n      alt={monster_page_data.monster_data.title}\n      title={monster_page_data.monster_data.title}\n      onError={({ currentTarget }) => {\n        currentTarget.onerror = null;\n        currentTarget.alt = \"This monster is missing it's image. It will be found eventually.\";\n        currentTarget.src = image_placeholder;\n        currentTarget.title = \"Missing image of \" + monster_page_data.monster_data.title;\n      }} /></div>\n  } else {\n    // Handle Statblock column span if there is no image.\n    fullBody = fullBody.slice(0,9) + \" style=\\\"column-span: all;\\\"\" + fullBody.slice(9);\n\n  }\n\n  // Handle setting and accent color.\n  const setting_name = monster_page_data.monster_data.setting;\n  const setting_acr = cat_acronyms[setting_name]\n  var hrClass = \"hr2\"\n  var titleStyle = {}\n  if (setting_acr) {\n    hrClass = \"hr2-\" + setting_acr\n    const colorVar = \"--color-\" + setting_acr\n    titleStyle = { color: COLORS.get(setting_acr) }\n  }\n\n\n\n  return (\n    <>\n      <div className=\"print\" >\n        {/* TITLE */}\n        <div className={monsterPageStyles.topHeader}>\n          <div className={monsterPageStyles.topHeaderInner}>\n            <h1 style={titleStyle}>{monster_page_data.monster_data.title}</h1>\n            <div className={monsterPageStyles.tsrPrint}>\n                {\n                  (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                      return (\n                        <div key={tsr} className={monsterPageStyles.source}>\n                          {tsr}\n                          <br />\n                        </div>\n                      )\n                    }\n                    ) : \"No TSR\"\n                }\n              </div>\n            <Link to={\"/catalog/\" + cat_acronyms[monster_page_data.monster_data.setting]}>\n              <img className={monsterPageStyles.settingImage} src={`/img_settings/${cat_acronyms[monster_page_data.monster_data.setting]}.gif`} alt={monster_page_data.monster_data.setting + \"Campaign Setting Logo\"} title={monster_page_data.monster_data.setting} />\n            </Link>\n          </div>\n          <hr className={monsterPageStyles.hr1} />\n          <hr className={hrClass} />\n\n        </div>\n        <article>\n\n\n          <div className={monsterPageStyles.columnWrapper}>\n            {monster_image}\n            <Interweave className=\"interweave\" content={fullBody} />\n            {/* {interweaveMonsterBody} */}\n\n            {/* <Interweave content=\"This string contains <b>HTML</b> and will safely be rendered!\" /> */}\n            {/* {test_jsx} */}\n            {/* TSR Array */}\n            <div className={monsterPageStyles.sourceList}>\n              <div className={monsterPageStyles.tsrLabel}>\n              </div>\n              <div className={monsterPageStyles.tsr}>\n                {\n                  (monster_page_data.monster_data.hasOwnProperty(\"TSR\") && monster_page_data.monster_data[\"TSR\"] != null) ?\n                    monster_page_data.monster_data[\"TSR\"].map((tsr: string) => {\n                      return (\n                        <div key={tsr} className={monsterPageStyles.source}>\n                          {all_tsr[tsr]?.title} ({tsr})\n                          <br />\n                        </div>\n                      )\n                    }\n                    ) : \"No TSR\"\n                }\n              </div>\n            </div>\n\n          </div>\n        </article>\n        {/* LAST MODIFIED */}\n        {/* <div className=\"last-modified\">\n        Last Modified: {monster_page_data.updatedAt}\n    </div> */}\n\n\n\n\n      </div>\n    </>\n  )\n}\n\nexport const Head: React.FC<Props> = ({ pageContext }) => (\n  <>\n    <title>{pageContext.title}</title>\n    <meta property=\"og:site_name\" content=\"AD&D 2nd Edition Complete Monstrous Compendium\"/>\n    <meta property=\"og:title\" content={pageContext.monster_key}/>\n    <meta property=\"og:description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) }/>\n    <meta property=\"og:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path}/>\n    <meta property=\"og:type\" content=\"website\"/>\n    {\n      pageContext.monster_data.images[1] && pageContext.monster_data.images[1].match(new RegExp(pageContext.monster_key, \"g\")) ?\n      <>\n      <meta property=\"og:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n      <meta name=\"twitter:image\" content={\"https://www.completecompendium.com/images/monsters/img/\" + pageContext.monster_key + \".gif\"}/>\n    </>\n      :\n      <></>\n    }\n    <meta property=\"og:image:width\" content=\"300\"/>\n    <meta property=\"og:image:height\" content=\"360\"/>\n    \n          \n    {/* <meta name=\"description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } /> */}\n    {/* Image: \"/images/monsters/img/\" + monster_page_data.monster_key + \".gif\" */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n    <meta name=\"twitter:url\" content={\"https://www.completecompendium.com\" + pageContext.monster_path} />\n    <meta name=\"twitter:title\" content=\"Advanced Dungeons & Dragons 2nd Edition Complete Compendium\" />\n    <meta name=\"twitter:description\" content={ getMonsterDescription(pageContext.monster_key ,pageContext.monster_data.fullBody) } />\n        \n  </>\n)\n\n\n\n// export const Head: React.FC<Props> = ({ pageContext }) => (\n//   <>\n//   </>\n// )\n\nexport default PrintMonsterTemplate\n\nexport const query = graphql`\n  {\n    sitePage {\n      pageContext\n    }\n  }\n`"],"names":["monster_key","fullBodyString","description","match","replace","source","polyfill","cat_acronyms","require","all_tsr","Head","_ref3","pageContext","React","title","property","content","getMonsterDescription","monster_data","fullBody","monster_path","images","RegExp","name","_ref","monster_page_data","sources","prev_key","next_key","monster_image","needs_image","image_url","main_img_pattern","image_placeholder","className","src","alt","onError","_ref2","currentTarget","onerror","slice","setting_name","setting","setting_acr","hrClass","titleStyle","color","COLORS","get","style","hasOwnProperty","map","tsr","key","monsterPageStyles","Link","to","Interweave","_all_tsr$tsr"],"sourceRoot":""}